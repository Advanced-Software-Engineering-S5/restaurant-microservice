openapi: 3.0.1
info:
  title: Restaurants Service API
  description: Restaurants from GoOutSafe with Microservices, by team S5
  version: "0.1"
servers:
- url: /
paths:
  /restaurants:
    get:
      tags:
      - Restaurants
      summary: Get all restaurants
      operationId: restaurant_microservice.restaurant.get_restaurants
      responses:
        200:
          description: Return all restaurants
          content:
            application/json:
              schema:
                type: object
                properties:
                  pets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Restaurant'
    post:
      tags:
      - Multiple Restaurants
      summary: Get all restaurants matching the specified ids
      operationId: restaurant_microservice.restaurant.get_multiple_restaurants
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                restaurant_ids:
                  type: array
                  description: List of ids of restaurants to be retrieved
                  items:
                    type: integer 
      responses:
        200:
          description: Return restaurants matching provided ids 
          content:
            application/json:
              schema:
                type: object
                properties:
                  restaurants:
                    type: array
                    items:
                      $ref: '#/components/schemas/Restaurant'                  
        400:
          description: Bad Request, missing parameters
          content: {}
        500:
          description: Service Fail
          content: {}
  /restaurants/{restaurant_id}:
    parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
    get:
      tags:
      - Restaurants
      summary: Get a single restaurant specified by the id 'restaurant_id'
      operationId: restaurant_microservice.restaurant.get_restaurant
      responses:
        200:
          description: Return restaurant with id 'restaurant_id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        404:
          description: Restaurant 'restaurant_id' does not exists
          content: {}
    put:
      tags:
      - Restaurants
      summary: Update a restaurant and its tables
      operationId: restaurant_microservice.restaurant.edit_restaurant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  description: The new phone number
                tables:
                  type: array
                  description: todo
                  items:
                    $ref: '#/components/schemas/RestaurantTable' 
      responses:
        201:
          description: Restaurant updated
          content: {}
        500:
          description: Generic server error
          content: {}
    delete:
      tags:
      - Restaurants
      summary: Delete a single restaurant specified by the id 'restaurant_id'
      operationId: restaurant_microservice.restaurant.delete_restaurant
      responses:
        200:
          description: Restaurant with id 'restaurant_id' deleted
          content: {}
        404:
          description: Restaurant 'restaurant_id' does not exists
          content: {}
        500:
          description: Generic server error
          content: {}

  /restaurants/tables/{restaurant_id}:
    get:
      tags:
      - Restaurants
      summary: Get a single restaurant's tables
      operationId: restaurant_microservice.restaurant.get_restaurant_tables
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      - name: seats
        in: query
        description: Number of seats
        required: false
        schema:
          type: integer
      responses:
        200:
          description: Return tables of the restaurant with id 'restaurant_id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantTable'
        404:
          description: Restaurant 'restaurant_id' does not exists
          content: {}
  /restaurants/new:
    post:
      tags:
      - Restaurants
      summary: Create a new restaurant
      operationId: restaurant_microservice.restaurant.create_restaurant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restaurant'  
      responses:
        201:
          description: Restaurant created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The restaurant ID.
        500:
          description: Generic database error
          content: {}
  /reviews/{restaurant_id}:
    get:
      tags:
      - Reviews
      summary: Return all reviews belonging to the specified restaurant
      operationId: restaurant_microservice.reviews.get_restaurant_reviews
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          type: integer
      - name: user_id
        in: query
        description: User Unique identifier
        required: false
        schema:
          type: integer
      responses:
        200:
          description: Return reviews belonging to restaurant with id 'restaurant_id'
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
        500:
          description: Service fail
          content: {}
    post:
      tags:
      - Reviews
      summary: Add a new review for the restaurant 'restaurant_id'
      operationId: restaurant_microservice.reviews.add_review
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'  
      responses:
        201:
          description: Review created
          content: {}
        500:
          description: Generic database error
          content: {}
  /reviews/user/{user_id}:
    get:
      tags:
      - Reviews
      summary: Return all reviews belonging to the specified user
      operationId: restaurant_microservice.reviews.get_user_reviews
      parameters:
      - name: user_id
        in: path
        description: User's Unique identifier
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-]+$
          type: string
      responses:
        200:
          description: Return reviews belonging to user with id 'user_id'
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
        500:
          description: Service fail
          content: {}
components:
  schemas:
    Restaurant:
      required:
      - name
      - lat
      - lon
      - phone
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier
          readOnly: true
          example: 123
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: Restaurant's name
          example: "My Pizza Restaurant"
        lat:
          type: number
          description: Restaurant Latitude
          example: 42.42
        lon:
          type: number
          description: Restaurant Longitude
          example: 42.42
        phone:
          type: string
          minLength: 5
          maxLength: 50
          description: Restaurant Phone Number
          example: "050123456"
        avg_stay_time:
          type: string
          format: string
        avg_stars:
          type: number
        num_reviews:
          type: integer
    RestaurantTable:
      required:
      - table_id
      - seats
      type: object
      properties:
        table_id:
          type: integer
          description: First PK
        restaurant_id:
          type: integer
          description: Second PK
        seats:
          type: integer
          description: Number of seats at the table
    Review:
      required:
      - reviewer_id
      - stars
      type: object
      properties:
        reviewer_id:
          type: integer
          description: Identifier of the user which submitted that review
          example: 1
        restaurant_id:
          type: integer
          description: Identifier of the user which submitted that review
          example: 1
        stars:
          type: number
          example: 3.5
        text_review:
          type: string
          example: "Nice place!"
          description: Textual review of the restaurant
        marked:
          type: boolean
          example: False
          description: True iff it has been counted in review stars averaging
      
